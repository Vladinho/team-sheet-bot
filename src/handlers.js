const GameSession = require('./GameSession');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
function handleStart(bot, msg, gameSessions, userStates, adminId) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const GROUP_ID = process.env.GROUP_ID ? parseInt(process.env.GROUP_ID) : null;
  
  if (GROUP_ID && chatId !== GROUP_ID) {
    bot.sendMessage(chatId, '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.');
    return;
  }

  if (userId === adminId) {
    bot.sendMessage(chatId, 
      '–ü—Ä–∏–≤–µ—Ç! –¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π /start <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ–ø–∏—Å–∞–Ω–∏–µ> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É.\n\n–ü—Ä–∏–º–µ—Ä: /start 10 –§—É—Ç–±–æ–ª –≤ 18:00'
    );
  } else {
    bot.sendMessage(chatId, 
      '–ü—Ä–∏–≤–µ—Ç! –û–∂–∏–¥–∞–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n' +
      'ü§ù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏:</b>\n' +
      '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞: + –ò–º—è\n' +
      '‚Ä¢ –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞: - –ò–º—è\n' +
      '‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫: /friends', 
      { parse_mode: 'HTML' }
    );
  }
}

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async function handleCreateGame(bot, msg, gameSessions, userStates, playersLimit, gameDescription, friends) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const GROUP_ID = process.env.GROUP_ID ? parseInt(process.env.GROUP_ID) : null;

  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã: chatId=${chatId}, playersLimit=${playersLimit}, description="${gameDescription}"`);

  if (GROUP_ID && chatId !== GROUP_ID) {
    bot.sendMessage(chatId, '–ò–≥—Ä—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–≥—Ä—ã
  const gameMessage = await bot.sendMessage(chatId, '‚öΩ –ó–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É');
  console.log(`–°–æ–∑–¥–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: messageId=${gameMessage.message_id}`);
  
  const gameSession = new GameSession(chatId, gameMessage.message_id, playersLimit, true, gameDescription, friends);
  gameSessions.set(chatId, gameSession);
  
  console.log(`GameSession —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...`);
  await updateGameMessage(bot, gameSession);
  console.log(`–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
}

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function handleEndGame(bot, msg, gameSessions, userStates) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const gameSession = gameSessions.get(chatId);
  if (!gameSession) {
    bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  gameSession.isActive = false;
  updateGameMessage(bot, gameSession);
  // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(bot, msg, gameSessions, userStates, friends) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥—Ä—É–∑–µ–π
  const addFriendMatch = text.match(/^\+\s+(.+)$/);
  const removeFriendMatch = text.match(/^\-\s+(.+)$/);

  if (addFriendMatch) {
    const friendName = addFriendMatch[1].trim();
    if (friendName.length === 0) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞.');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!friends.has(userId)) {
      friends.set(userId, []);
    }

    const userFriends = friends.get(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥—Ä—É–≥
    if (userFriends.find(f => f.name.toLowerCase() === friendName.toLowerCase())) {
      bot.sendMessage(chatId, `–î—Ä—É–≥ "${friendName}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞
    userFriends.push({
      name: friendName,
      addedBy: userId
    });

    bot.sendMessage(chatId, `‚úÖ –î—Ä—É–≥ "${friendName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    const gameSession = gameSessions.get(chatId);
    if (gameSession && gameSession.isActive) {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        gameSession.addFriendsToPlayers(friends);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        const message = gameSession.generateMessage();
        const keyboard = gameSession.generateKeyboard();
        
        await bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
        });
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π');
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      }
    }
    return;
  }

  if (removeFriendMatch) {
    const friendName = removeFriendMatch[1].trim();
    if (friendName.length === 0) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      return;
    }

    if (!friends.has(userId)) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.');
      return;
    }

    const userFriends = friends.get(userId);
    const friendIndex = userFriends.findIndex(f => f.name.toLowerCase() === friendName.toLowerCase());
    
    if (friendIndex === -1) {
      bot.sendMessage(chatId, `–î—Ä—É–≥ "${friendName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.`);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∞
    userFriends.splice(friendIndex, 1);
    bot.sendMessage(chatId, `‚ùå –î—Ä—É–≥ "${friendName}" —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    const gameSession = gameSessions.get(chatId);
    if (gameSession && gameSession.isActive) {
      try {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
        gameSession.removeFriendsOfPlayer(userId);
        gameSession.addFriendsToPlayers(friends);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        const message = gameSession.generateMessage();
        const keyboard = gameSession.generateKeyboard();
        
        await bot.sendMessage(chatId, message, {
          parse_mode: 'HTML',
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
        });
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π');
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      }
    }
    return;
  }

  // –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
  // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ bot.onText
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(bot, query, gameSessions, userStates, adminId, friends) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  const messageId = query.message.message_id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  if (data === 'end_game') {
    if (userId !== adminId) {
      bot.answerCallbackQuery(query.id, { text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.' });
      return;
    }
  } else {
    const gameSession = gameSessions.get(chatId);
    if (!gameSession || gameSession.messageId !== messageId) {
      bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.' });
      return;
    }
  }

  const username = query.from.username;
  const firstName = query.from.first_name;
  const lastName = query.from.last_name;

  switch (data) {
    case 'register':
      const currentGameSession = gameSessions.get(chatId);
      if (currentGameSession.players.find(p => p.userId === userId) || 
          currentGameSession.reserve.find(p => p.userId === userId)) {
        bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
        return;
      }

      const isMain = currentGameSession.addPlayer(userId, username, firstName, lastName);
      await updateGameMessage(bot, currentGameSession);
      bot.answerCallbackQuery(query.id, { 
        text: isMain ? '–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!' : '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!' 
      });
      break;

    case 'register_reserve':
      const reserveGameSession = gameSessions.get(chatId);
      if (reserveGameSession.players.find(p => p.userId === userId) || 
          reserveGameSession.reserve.find(p => p.userId === userId)) {
        bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
        return;
      }

      reserveGameSession.reserve.push({ userId, username, firstName, lastName });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      if (reserveGameSession.friends && reserveGameSession.friends.has(userId)) {
        reserveGameSession.addFriendsToPlayers(reserveGameSession.friends);
      }
      
      await updateGameMessage(bot, reserveGameSession);
      bot.answerCallbackQuery(query.id, { text: '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!' });
      break;

    case 'unregister':
      const unregisterGameSession = gameSessions.get(chatId);
      const removed = unregisterGameSession.removePlayer(userId);
      if (removed) {
        await updateGameMessage(bot, unregisterGameSession);
        bot.answerCallbackQuery(query.id, { text: '–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!' });
      } else {
        bot.answerCallbackQuery(query.id, { text: '–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
      }
      break;

    case 'end_game':
      const endGameSession = gameSessions.get(chatId);
      if (endGameSession) {
        endGameSession.isActive = false;
        await updateGameMessage(bot, endGameSession);
        bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' });
      } else {
        bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
      }
      break;

    default:
      break;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä—ã
async function updateGameMessage(bot, gameSession) {
  try {
    const message = gameSession.generateMessage();
    const keyboard = gameSession.generateKeyboard();
    
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä—ã: chatId=${gameSession.chatId}, messageId=${gameSession.messageId}`);
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${message.substring(0, 100)}...`);
    console.log(`–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: ${JSON.stringify(keyboard)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try {
      await bot.editMessageText(message, {
        chat_id: gameSession.chatId,
        message_id: gameSession.messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
      });
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (editError) {
      if (editError.response && editError.response.statusCode === 400 && 
          editError.response.body && editError.response.body.description === 'message is not modified') {
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      } else {
        throw editError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
  }
}

module.exports = {
  handleStart,
  handleCreateGame,
  handleEndGame,
  handleMessage,
  handleCallbackQuery,
  updateGameMessage
};
