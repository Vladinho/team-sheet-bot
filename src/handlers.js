const GameSession = require('./GameSession');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserState = {
  IDLE: 'idle',
  CREATING_GAME: 'creating_game',
  ENTERING_PLAYERS_LIMIT: 'entering_players_limit',
  ENTERING_FRIEND_NAME: 'entering_friend_name'
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
function handleStart(bot, msg, gameSessions, userStates) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const GROUP_ID = process.env.GROUP_ID ? parseInt(process.env.GROUP_ID) : null;
  const ADMIN_ID = parseInt(process.env.ADMIN_ID);
  
  if (GROUP_ID && chatId !== GROUP_ID) {
    bot.sendMessage(chatId, '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.');
    return;
  }

  if (userId === ADMIN_ID) {
    bot.sendMessage(chatId, 
      '–ü—Ä–∏–≤–µ—Ç! –¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π /create_game –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É.',
      { reply_markup: { keyboard: [['/create_game']], resize_keyboard: true } }
    );
  } else {
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –û–∂–∏–¥–∞–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function handleCreateGame(bot, msg, gameSessions, userStates) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const ADMIN_ID = parseInt(process.env.ADMIN_ID);
  const GROUP_ID = process.env.GROUP_ID ? parseInt(process.env.GROUP_ID) : null;

  if (userId !== ADMIN_ID) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã.');
    return;
  }

  if (GROUP_ID && chatId !== GROUP_ID) {
    bot.sendMessage(chatId, '–ò–≥—Ä—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.');
    return;
  }

  userStates.set(userId, UserState.CREATING_GAME);
  
  bot.sendMessage(chatId, 
    '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):',
    { reply_markup: { keyboard: [['10 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)', '–û—Ç–º–µ–Ω–∞']], resize_keyboard: true } }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function handleEndGame(bot, msg, gameSessions, userStates) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const ADMIN_ID = parseInt(process.env.ADMIN_ID);

  if (userId !== ADMIN_ID) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.');
    return;
  }

  const gameSession = gameSessions.get(chatId);
  if (!gameSession) {
    bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  gameSession.isActive = false;
  updateGameMessage(bot, gameSession);
  bot.sendMessage(chatId, '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞.');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(bot, msg, gameSessions, userStates) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  const state = userStates.get(userId);
  
  if (state === UserState.CREATING_GAME) {
    if (text === '–û—Ç–º–µ–Ω–∞') {
      userStates.delete(userId);
      bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.', { reply_markup: { remove_keyboard: true } });
      return;
    }

    let playersLimit = 10;
    if (text !== '10 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)') {
      const limit = parseInt(text);
      if (isNaN(limit) || limit <= 0) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç.');
        return;
      }
      playersLimit = limit;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    const gameMessage = await bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
    const gameSession = new GameSession(chatId, gameMessage.message_id, playersLimit);
    gameSessions.set(chatId, gameSession);
    
    await updateGameMessage(bot, gameSession);
    userStates.delete(userId);
    
    bot.sendMessage(chatId, '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!', { reply_markup: { remove_keyboard: true } });
  }
  
  else if (state === UserState.ENTERING_FRIEND_NAME) {
    const gameSession = gameSessions.get(chatId);
    if (!gameSession) {
      userStates.delete(userId);
      bot.sendMessage(chatId, '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { reply_markup: { remove_keyboard: true } });
      return;
    }

    if (text === '–û—Ç–º–µ–Ω–∞') {
      userStates.delete(userId);
      bot.sendMessage(chatId, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', { reply_markup: { remove_keyboard: true } });
      return;
    }

    const success = gameSession.addFriend(userId, text, userId);
    if (success) {
      await updateGameMessage(bot, gameSession);
      bot.sendMessage(chatId, `–î—Ä—É–≥ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω!`, { reply_markup: { remove_keyboard: true } });
    } else {
      const maxFriends = userId === parseInt(process.env.ADMIN_ID) ? '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' : '2';
      bot.sendMessage(chatId, `–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π (–º–∞–∫—Å–∏–º—É–º ${maxFriends}).`);
    }
    
    userStates.delete(userId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(bot, query, gameSessions, userStates) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  const messageId = query.message.message_id;

  const gameSession = gameSessions.get(chatId);
  if (!gameSession || gameSession.messageId !== messageId) {
    bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.' });
    return;
  }

  const username = query.from.username;
  const firstName = query.from.first_name;
  const lastName = query.from.last_name;

  switch (data) {
    case 'register':
      if (gameSession.players.find(p => p.userId === userId) || 
          gameSession.reserve.find(p => p.userId === userId)) {
        bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
        return;
      }

      const isMain = gameSession.addPlayer(userId, username, firstName, lastName);
      await updateGameMessage(bot, gameSession);
      bot.answerCallbackQuery(query.id, { 
        text: isMain ? '–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!' : '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!' 
      });
      break;

    case 'register_reserve':
      if (gameSession.players.find(p => p.userId === userId) || 
          gameSession.reserve.find(p => p.userId === userId)) {
        bot.answerCallbackQuery(query.id, { text: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
        return;
      }

      gameSession.reserve.push({ userId, username, firstName, lastName });
      await updateGameMessage(bot, gameSession);
      bot.answerCallbackQuery(query.id, { text: '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!' });
      break;

    case 'unregister':
      const removed = gameSession.removePlayer(userId);
      if (removed) {
        await updateGameMessage(bot, gameSession);
        bot.answerCallbackQuery(query.id, { text: '–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!' });
      } else {
        bot.answerCallbackQuery(query.id, { text: '–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã!' });
      }
      break;

    case 'add_friend':
      userStates.set(userId, UserState.ENTERING_FRIEND_NAME);
      bot.sendMessage(chatId, 
        '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞:',
        { reply_markup: { keyboard: [['–û—Ç–º–µ–Ω–∞']], resize_keyboard: true } }
      );
      bot.answerCallbackQuery(query.id);
      break;

    case 'remove_friend':
      const friends = gameSession.getFriendsList(userId);
      if (friends.length === 0) {
        bot.answerCallbackQuery(query.id, { text: '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π!' });
        return;
      }

      const keyboard = friends.map(friend => [{ text: `üóë ${friend.name}`, callback_data: `remove_friend_${friend.name}` }]);
      keyboard.push([{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_remove_friend' }]);
      
      bot.sendMessage(chatId, 
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        { reply_markup: { inline_keyboard: keyboard } }
      );
      bot.answerCallbackQuery(query.id);
      break;

    case 'cancel_remove_friend':
      bot.deleteMessage(chatId, query.message.message_id);
      bot.answerCallbackQuery(query.id);
      break;

    default:
      if (data.startsWith('remove_friend_')) {
        const friendName = data.replace('remove_friend_', '');
        const removed = gameSession.removeFriend(userId, friendName);
        
        if (removed) {
          await updateGameMessage(bot, gameSession);
          bot.answerCallbackQuery(query.id, { text: `–î—Ä—É–≥ "${friendName}" —É–¥–∞–ª–µ–Ω!` });
        } else {
          bot.answerCallbackQuery(query.id, { text: '–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!' });
        }
        
        bot.deleteMessage(chatId, query.message.message_id);
      }
      break;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä—ã
async function updateGameMessage(bot, gameSession) {
  try {
    const message = gameSession.generateMessage();
    const keyboard = gameSession.generateKeyboard();
    
    await bot.editMessageText(message, {
      chat_id: gameSession.chatId,
      message_id: gameSession.messageId,
      parse_mode: 'HTML',
      reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

module.exports = {
  UserState,
  handleStart,
  handleCreateGame,
  handleEndGame,
  handleMessage,
  handleCallbackQuery,
  updateGameMessage
};
