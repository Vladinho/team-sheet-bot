const https = require('https');

class NetworkMonitor {
  constructor() {
    this.lastKnownIP = null;
    this.lastCheckTime = 0;
    this.checkInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞
    this.ipCheckServices = [
      'https://api.ipify.org?format=json',
      'https://ipinfo.io/json',
      'https://httpbin.org/ip'
    ];
    this.currentServiceIndex = 0;
    this.isMonitoring = false;
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏
  start() {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    console.log('üåê –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏...');
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.checkIP();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.interval = setInterval(() => {
      this.checkIP();
    }, this.checkInterval);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stop() {
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    this.isMonitoring = false;
    console.log('üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞
  async checkIP() {
    try {
      const ip = await this.getCurrentIP();
      
      if (ip) {
        this.handleIPChange(ip);
      }
      
      this.lastCheckTime = Date.now();
      
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:', error.message);
      
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
      this.currentServiceIndex = (this.currentServiceIndex + 1) % this.ipCheckServices.length;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞
  async getCurrentIP() {
    return new Promise((resolve, reject) => {
      const url = this.ipCheckServices[this.currentServiceIndex];
      
      const req = https.get(url, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          try {
            const json = JSON.parse(data);
            
            // –†–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç IP –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            let ip = json.ip || json.query || json.origin;
            
            if (ip) {
              resolve(ip);
            } else {
              reject(new Error('IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ'));
            }
            
          } catch (error) {
            reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON'));
          }
        });
      });
      
      req.on('error', (error) => {
        reject(error);
      });
      
      req.setTimeout(10000, () => {
        req.destroy();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è IP
  handleIPChange(newIP) {
    if (this.lastKnownIP && this.lastKnownIP !== newIP) {
      console.log(`üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ IP: ${this.lastKnownIP} ‚Üí ${newIP}`);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
      if (this.onNetworkChange) {
        this.onNetworkChange(newIP, this.lastKnownIP);
      }
    }
    
    this.lastKnownIP = newIP;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IP
  forceCheck() {
    console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞...');
    this.checkIP();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
  getNetworkInfo() {
    return {
      currentIP: this.lastKnownIP,
      lastCheck: this.lastCheckTime,
      isMonitoring: this.isMonitoring,
      uptime: this.lastCheckTime ? Date.now() - this.lastCheckTime : 0
    };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
  onNetworkChange(callback) {
    this.onNetworkChange = callback;
  }
}

module.exports = NetworkMonitor;
