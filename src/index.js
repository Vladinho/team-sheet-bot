require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const BotHealthChecker = require('./healthCheck');
const NetworkMonitor = require('./networkMonitor');
const { 
  handleStart, 
  handleCreateGame, 
  handleMessage, 
  handleCallbackQuery,
  restoreStateFromMessage
} = require('./handlers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID);
const GROUP_ID = process.env.GROUP_ID ? parseInt(process.env.GROUP_ID) : null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
let bot = null;
let healthChecker = null;
let networkMonitor = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 15; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
const RECONNECT_DELAY = 3000; // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
function createBot() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...');
    
    bot = new TelegramBot(BOT_TOKEN, { 
      polling: true,
      // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      polling_options: {
        timeout: 15,        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        limit: 100,
        retryTimeout: 3000, // –£–º–µ–Ω—å—à–∞–µ–º retry timeout
        allowed_updates: ['message', 'callback_query'] // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      }
    });
    
    setupBotHandlers();
    setupErrorHandlers();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
    if (healthChecker) {
      healthChecker.stop();
    }
    healthChecker = new BotHealthChecker(bot, BOT_TOKEN);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏
    if (networkMonitor) {
      networkMonitor.stop();
    }
    networkMonitor = new NetworkMonitor();
    networkMonitor.onNetworkChange((newIP, oldIP) => {
      console.log(`üö® –°–º–µ–Ω–∞ —Å–µ—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ${oldIP} ‚Üí ${newIP}`);
      console.log('üîÑ –ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      forceReconnect();
    });
    networkMonitor.start();
    
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω');
    reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error.message);
    scheduleReconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function forceReconnect() {
  console.log('üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏...');
  reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
  scheduleReconnect();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
function setupBotHandlers() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start(?:\s+(\d+)\s+(.+))?/, (msg, match) => {
    if (match && match[1] && match[2]) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
      const userId = msg.from.id;
      
      if (userId !== ADMIN_ID) {
        bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã.');
        return;
      }
      
      const playersLimit = parseInt(match[1]);
      const gameDescription = match[2];
      
      handleCreateGame(bot, msg, gameSessions, userStates, playersLimit, gameDescription);
    } else {
      // –û–±—ã—á–Ω—ã–π /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      handleStart(bot, msg, gameSessions, userStates, ADMIN_ID);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  bot.onText(/\/restore_state/, (msg) => {
    const userId = msg.from.id;
    
    if (userId !== ADMIN_ID) {
      bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    const chatId = msg.chat.id;
    const existingGame = gameSessions.get(chatId);
    
    if (existingGame) {
      bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.');
      return;
    }
    
    bot.sendMessage(chatId, 
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –∏–≥—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n' +
      '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –∏–≥—Ä—É.'
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', (msg) => {
    handleMessage(bot, msg, gameSessions, userStates);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('callback_query', (query) => {
    handleCallbackQuery(bot, query, gameSessions, userStates, ADMIN_ID);
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
function setupErrorHandlers() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
  bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
    if (error.code === 'ECONNRESET' || 
        error.code === 'ETIMEDOUT' || 
        error.code === 'ENOTFOUND' ||
        error.code === 'ECONNREFUSED' ||
        error.code === 'EHOSTUNREACH' ||
        error.message.includes('network') ||
        error.message.includes('timeout') ||
        error.message.includes('connection') ||
        error.message.includes('refused') ||
        error.message.includes('unreachable')) {
      
      console.log('üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å–µ—Ç–∏
      if (networkMonitor) {
        networkMonitor.forceCheck();
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      if (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT') {
        console.log('üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫...');
        reconnectAttempts = Math.max(0, reconnectAttempts - 2);
      }
      
      scheduleReconnect();
    }
  });

  // –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞
  bot.on('error', (error) => {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
    if (error.code === 'ECONNRESET' || 
        error.code === 'ETIMEDOUT' || 
        error.code === 'ENOTFOUND' ||
        error.code === 'ECONNREFUSED' ||
        error.code === 'EHOSTUNREACH' ||
        error.message.includes('network') ||
        error.message.includes('timeout') ||
        error.message.includes('connection')) {
      
      console.log('üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å–µ—Ç–∏
      if (networkMonitor) {
        networkMonitor.forceCheck();
      }
      scheduleReconnect();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  bot.on('end', () => {
    console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å–µ—Ç—å
    if (networkMonitor) {
      networkMonitor.forceCheck();
    }
    scheduleReconnect();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  bot.on('disconnect', () => {
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å–µ—Ç—å
    if (networkMonitor) {
      networkMonitor.forceCheck();
    }
    scheduleReconnect();
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function scheduleReconnect() {
  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${MAX_RECONNECT_ATTEMPTS})`);
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    process.exit(1); // Docker –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    return;
  }

  reconnectAttempts++;
  
  // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  let delay;
  if (reconnectAttempts <= 3) {
    // –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏ - –±—ã—Å—Ç—Ä–æ
    delay = 1000 * reconnectAttempts; // 1—Å, 2—Å, 3—Å
  } else if (reconnectAttempts <= 8) {
    // –°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫ - —É–º–µ—Ä–µ–Ω–Ω–æ
    delay = 5000 + (reconnectAttempts - 3) * 2000; // 5—Å, 7—Å, 9—Å, 11—Å, 13—Å
  } else {
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
    delay = Math.min(30000, RECONNECT_DELAY * Math.pow(1.5, reconnectAttempts - 8));
  }
  
  console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS} —á–µ—Ä–µ–∑ ${Math.round(delay/1000)} —Å–µ–∫...`);
  
  setTimeout(() => {
    if (bot) {
      try {
        console.log('üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        bot.stopPolling();
        bot.close();
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', e.message);
      }
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setTimeout(() => {
      createBot();
    }, 1000);
    
  }, delay);
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏, –±–µ–∑ –ë–î)
const gameSessions = new Map(); // chatId -> gameData
const userStates = new Map(); // userId -> state

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  if (bot) {
    bot.stopPolling();
    bot.close();
  }
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  if (bot) {
    bot.stopPolling();
    bot.close();
  }
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
console.log(`üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${ADMIN_ID}`);
console.log(`üë• –ì—Ä—É–ø–ø–∞: ${GROUP_ID || '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞'}`);

createBot();
