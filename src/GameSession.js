class GameSession {
  constructor(chatId, messageId, playersLimit = 10, isAdmin = false, gameDescription = '', friends = null) {
    this.chatId = chatId;
    this.messageId = messageId; // ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.lastMessageId = messageId; // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    this.playersLimit = playersLimit;
    this.players = []; // [{userId, username, firstName, lastName}]
    this.reserve = []; // [{userId, username, firstName, lastName}]
    this.isActive = true;
    this.isAdmin = isAdmin;
    this.gameDescription = gameDescription;
    this.friends = friends; // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
  }

  addPlayer(userId, username, firstName, lastName) {
    if (this.players.length < this.playersLimit) {
      this.players.push({ userId, username, firstName, lastName });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      if (this.friends && this.friends.has(userId)) {
        this.addFriendsToPlayers(this.friends);
      }
      
      return true;
    } else {
      this.reserve.push({ userId, username, firstName, lastName });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      if (this.friends && this.friends.has(userId)) {
        this.addFriendsToPlayers(this.friends);
      }
      
      return false;
    }
  }

  removePlayer(userId) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const playerIndex = this.players.findIndex(p => p.userId === userId);
    if (playerIndex !== -1) {
      this.players.splice(playerIndex, 1);
      
      // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      this.removeFriendsOfPlayer(userId);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
      if (this.reserve.length > 0) {
        const reservePlayer = this.reserve.shift();
        this.players.push(reservePlayer);
      }
      
      return true;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
    const reserveIndex = this.reserve.findIndex(p => p.userId === userId);
    if (reserveIndex !== -1) {
      this.reserve.splice(reserveIndex, 1);
      
      // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      this.removeFriendsOfPlayer(userId);
      
      return true;
    }

    return false;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  addFriendsToPlayers(friends) {
    if (!friends || friends.size === 0) return;
    
    for (const [userId, userFriends] of friends) {
      if (userFriends.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –∑–∞–ø–∏—Å–∞–Ω) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
        let playerName = `User${userId}`;
        const player = this.players.find(p => p.userId === userId) || 
                      this.reserve.find(p => p.userId === userId);
        
        if (player) {
          playerName = player.firstName || player.username || `User${userId}`;
        }
        
        for (const friend of userFriends) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥—Ä—É–≥
          const existingFriend = this.players.find(p => 
            p.friendOf === userId && p.firstName === friend.name
          ) || this.reserve.find(p => 
            p.friendOf === userId && p.firstName === friend.name
          );
          
          if (!existingFriend) {
            const friendPlayer = {
              userId: `friend_${userId}_${friend.name}`,
              username: null,
              firstName: friend.name,
              lastName: null,
              friendOf: userId,
              isFriend: true
            };
            
            if (this.players.length < this.playersLimit) {
              this.players.push(friendPlayer);
            } else {
              this.reserve.push(friendPlayer);
            }
          }
        }
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  removeFriendsOfPlayer(userId) {
    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    this.players = this.players.filter(p => p.friendOf !== userId);
    
    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
    this.reserve = this.reserve.filter(p => p.friendOf !== userId);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
    while (this.players.length < this.playersLimit && this.reserve.length > 0) {
      const reservePlayer = this.reserve.shift();
      this.players.push(reservePlayer);
    }
  }


  generateMessage() {
    let message = `‚öΩ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É</b>\n\n`;
    
    if (this.gameDescription) {
      message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${this.gameDescription}\n\n`;
    }
    
    message += `üë• <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n`;
    
    // –°–æ–∑–¥–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
    for (let i = 1; i <= this.playersLimit; i++) {
      const player = this.players[i - 1];
      if (player) {
        if (player.isFriend) {
          // –î–ª—è –¥—Ä—É–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          const mainPlayerName = typeof player.friendOf === 'string' && !player.friendOf.startsWith('User') 
            ? player.friendOf 
            : this.getPlayerNameById(player.friendOf);
          message += `${i}. ${player.firstName} (–¥—Ä—É–≥ ${mainPlayerName}, id:${player.userId})\n`;
        } else {
          message += `${i}. ${player.firstName || player.username || `User${player.userId}`} (id:${player.userId})\n`;
        }
      } else {
        message += `${i}.\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.reserve.length > 0) {
      message += `\n‚è≥ <b>–†–µ–∑–µ—Ä–≤:</b>\n`;
      this.reserve.forEach((player, index) => {
        if (player.isFriend) {
          // –î–ª—è –¥—Ä—É–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          const mainPlayerName = typeof player.friendOf === 'string' && !player.friendOf.startsWith('User') 
            ? player.friendOf 
            : this.getPlayerNameById(player.friendOf);
          message += `${index + 1}. ${player.firstName} (–¥—Ä—É–≥ ${mainPlayerName}, id:${player.userId})\n`;
        } else {
          message += `${index + 1}. ${player.firstName || player.username || `User${player.userId}`} (id:${player.userId})\n`;
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥—Ä—É–∑—å—è–º–∏
    message += `‚Ä¢ –î–ª—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: + –ò–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: + –ò–≤–∞–Ω)\n`;
    message += `‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: - –ò–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: - –ò–≤–∞–Ω)\n`;
    return message;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
  getPlayerNameById(userId) {
    const player = this.players.find(p => p.userId === userId) || 
                  this.reserve.find(p => p.userId === userId);
    
    if (player) {
      return player.firstName || player.username || `User${userId}`;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
    if (typeof userId === 'string' && userId.startsWith('User')) {
      const nameMatch = userId.match(/User(.+)/);
      if (nameMatch) {
        return nameMatch[1];
      }
    }
    
    // –ï—Å–ª–∏ userId - —ç—Ç–æ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if (typeof userId === 'number' || !isNaN(userId)) {
      return `User${userId}`;
    }
    
    return `User${userId}`;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  updateLastMessage(messageId) {
    this.lastMessageId = messageId;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async deletePreviousMessage(bot) {
    if (this.lastMessageId !== this.messageId) {
      try {
        await bot.deleteMessage(this.chatId, this.lastMessageId);
        console.log(`–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${this.lastMessageId}`);
      } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      }
    }
  }

  generateKeyboard() {
    const keyboard = [];
    
    if (this.isActive) {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
      keyboard.push([
        { text: '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'register' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: 'unregister' }
      ]);
      
      if (this.players.length >= this.playersLimit) {
        keyboard.push([
          { text: '‚è≥ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤', callback_data: 'register_reserve' }
        ]);
      }

      // –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
      if (this.isAdmin) {
        keyboard.push([
          { text: 'üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', callback_data: 'end_game' }
        ]);
      }
    }

    return keyboard;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  static parseFromMessage(text, chatId, messageId, friends = null) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É
      if (!text.includes('‚öΩ –ó–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É')) {
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
      let gameDescription = '';
      const descriptionMatch = text.match(/üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n([^\n]+)/);
      if (descriptionMatch) {
        gameDescription = descriptionMatch[1];
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
      const playersListMatch = text.match(/üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n([\s\S]*?)(?=\n\n‚è≥ –†–µ–∑–µ—Ä–≤:|\n\n‚Ä¢ –î–ª—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞|$)/);
      if (!playersListMatch) {
        return null;
      }

      const playersList = playersListMatch[1];
      const playerLines = playersList.split('\n').filter(line => line.trim());
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
      const playersLimit = playerLines.length;

      // –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      const players = [];
      for (const line of playerLines) {
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º userId –≤ —Å–∫–æ–±–∫–∞—Ö
        const match = line.match(/^\d+\.\s+(.+?)(?:\s+\(–¥—Ä—É–≥\s+(.+?),\s*id:(\d+)\)|\s+\(id:(\d+)\))?$/);
        if (match) {
          const playerName = match[1].trim();
          const friendOf = match[2];
          const userId = match[3] || match[4]; // userId –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ 3-–π –∏–ª–∏ 4-–π –≥—Ä—É–ø–ø–µ
          
          if (playerName && playerName !== '') {
            if (friendOf && userId) {
              // –≠—Ç–æ –¥—Ä—É–≥ —Å userId
              players.push({
                userId: parseInt(userId), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                username: null,
                firstName: playerName,
                lastName: null,
                friendOf: friendOf, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                isFriend: true
              });
            } else if (userId) {
              // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫ —Å userId
              players.push({
                userId: parseInt(userId), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                username: null,
                firstName: playerName,
                lastName: null
              });
            } else {
              // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ userId
              if (friendOf) {
                players.push({
                  userId: `friend_${Date.now()}_${playerName}`,
                  username: null,
                  firstName: playerName,
                  lastName: null,
                  friendOf: friendOf,
                  isFriend: true
                });
              } else {
                players.push({
                  userId: `restored_${Date.now()}_${playerName}`,
                  username: null,
                  firstName: playerName,
                  lastName: null
                });
              }
            }
          }
        }
      }

      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑–µ—Ä–≤
      const reserve = [];
      const reserveMatch = text.match(/‚è≥ –†–µ–∑–µ—Ä–≤:\n([\s\S]*?)(?=\n\n‚Ä¢ –î–ª—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∞|$)/);
      if (reserveMatch) {
        const reserveList = reserveMatch[1];
        const reserveLines = reserveList.split('\n').filter(line => line.trim());
        
        for (const line of reserveLines) {
          // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º userId –≤ —Å–∫–æ–±–∫–∞—Ö
          const match = line.match(/^\d+\.\s+(.+?)(?:\s+\(–¥—Ä—É–≥\s+(.+?),\s*id:(\d+)\)|\s+\(id:(\d+)\))?$/);
          if (match) {
            const playerName = match[1].trim();
            const friendOf = match[2];
            const userId = match[3] || match[4]; // userId –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ 3-–π –∏–ª–∏ 4-–π –≥—Ä—É–ø–ø–µ
            
            if (playerName && playerName !== '') {
              if (friendOf && userId) {
                // –≠—Ç–æ –¥—Ä—É–≥ –≤ —Ä–µ–∑–µ—Ä–≤–µ —Å userId
                reserve.push({
                  userId: parseInt(userId), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                  username: null,
                  firstName: playerName,
                  lastName: null,
                  friendOf: friendOf,
                  isFriend: true
                });
              } else if (userId) {
                // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ —Ä–µ–∑–µ—Ä–≤–µ —Å userId
                reserve.push({
                  userId: parseInt(userId), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                  username: null,
                  firstName: playerName,
                  lastName: null
                });
              } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ userId
                if (friendOf) {
                  reserve.push({
                    userId: `friend_reserve_${Date.now()}_${playerName}`,
                    username: null,
                    firstName: playerName,
                    lastName: null,
                    friendOf: friendOf,
                    isFriend: true
                  });
                } else {
                  reserve.push({
                    userId: `reserve_${Date.now()}_${playerName}`,
                    username: null,
                    firstName: playerName,
                    lastName: null
                  });
                }
              }
            }
          }
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
      const isActive = !text.includes('üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É') || text.includes('‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è');

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π GameSession
      const gameSession = new GameSession(chatId, messageId, playersLimit, true, gameDescription, friends);
      gameSession.players = players;
      gameSession.reserve = reserve;
      gameSession.isActive = isActive;
      gameSession.lastMessageId = messageId;

      return gameSession;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  getRestoreText() {
    return this.generateMessage();
  }

}

module.exports = GameSession;
