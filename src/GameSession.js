class GameSession {
  constructor(chatId, messageId, playersLimit = 10, isAdmin = false, gameDescription = '', friends = null) {
    this.chatId = chatId;
    this.messageId = messageId;
    this.playersLimit = playersLimit;
    this.players = []; // [{userId, username, firstName, lastName}]
    this.reserve = []; // [{userId, username, firstName, lastName}]
    this.isActive = true;
    this.isAdmin = isAdmin;
    this.gameDescription = gameDescription;
    this.friends = friends; // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
  }

  addPlayer(userId, username, firstName, lastName) {
    if (this.players.length < this.playersLimit) {
      this.players.push({ userId, username, firstName, lastName });
      return true;
    } else {
      this.reserve.push({ userId, username, firstName, lastName });
      return false;
    }
  }

  removePlayer(userId) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const playerIndex = this.players.findIndex(p => p.userId === userId);
    if (playerIndex !== -1) {
      this.players.splice(playerIndex, 1);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
      if (this.reserve.length > 0) {
        const reservePlayer = this.reserve.shift();
        this.players.push(reservePlayer);
      }
      
      return true;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
    const reserveIndex = this.reserve.findIndex(p => p.userId === userId);
    if (reserveIndex !== -1) {
      this.reserve.splice(reserveIndex, 1);
      return true;
    }

    return false;
  }



  generateMessage() {
    const playersList = this.players.map(p => 
      `üë§ ${p.firstName || p.username || `User${p.userId}`}`
    ).join('\n');

    const reserveList = this.reserve.map(p => 
      `‚è≥ ${p.firstName || p.username || `User${p.userId}`} (—Ä–µ–∑–µ—Ä–≤)`
    ).join('\n');

    let message = `‚öΩ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É</b>\n\n`;
    
    if (this.gameDescription) {
      message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${this.gameDescription}\n\n`;
    }
    
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: ${this.players.length}/${this.playersLimit}\n`;
    message += `‚Ä¢ –í —Ä–µ–∑–µ—Ä–≤–µ: ${this.reserve.length}\n\n`;

    if (playersList) {
      message += `üë• <b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:</b>\n${playersList}\n\n`;
    }

    if (reserveList) {
      message += `‚è≥ <b>–†–µ–∑–µ—Ä–≤:</b>\n${reserveList}\n\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.friends && this.friends.size > 0) {
      let friendsList = '';
      for (const [userId, userFriends] of this.friends) {
        if (userFriends.length > 0) {
          // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–∞
          const player = this.players.find(p => p.userId === userId) || 
                        this.reserve.find(p => p.userId === userId);
          
          if (player) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∏–≥—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥—Ä—É–∑–µ–π
            const playerName = player.firstName || player.username || `User${userId}`;
            const friendsNames = userFriends.map(f => f.name).join(', ');
            friendsList += `üë• ${playerName}: ${friendsNames}\n`;
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, –Ω–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            const userFriendsNames = userFriends.map(f => f.name).join(', ');
            friendsList += `ü§ù –î—Ä—É–∑—å—è: ${userFriendsNames}\n`;
          }
        }
      }
      
      if (friendsList) {
        message += `ü§ù <b>–î—Ä—É–∑—å—è:</b>\n${friendsList}\n`;
      }
    }

    return message;
  }

  generateKeyboard() {
    const keyboard = [];
    
    if (this.isActive) {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
      keyboard.push([
        { text: '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'register' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: 'unregister' }
      ]);
      
      if (this.players.length >= this.playersLimit) {
        keyboard.push([
          { text: '‚è≥ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤', callback_data: 'register_reserve' }
        ]);
      }

      // –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
      if (this.isAdmin) {
        keyboard.push([
          { text: 'üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', callback_data: 'end_game' }
        ]);
      }
    }

    return keyboard;
  }


}

module.exports = GameSession;
